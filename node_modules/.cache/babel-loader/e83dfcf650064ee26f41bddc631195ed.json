{"ast":null,"code":"'use strict';\n\nvar ReactDOM = require('react-dom');\n\nvar createFocusGroup = require('focus-group');\n\nvar externalStateControl = require('./externalStateControl');\n\nvar focusGroupOptions = {\n  wrap: true,\n  stringSearch: true\n};\nvar protoManager = {\n  init: function init(options) {\n    this.options = options || {};\n\n    if (typeof this.options.closeOnSelection === 'undefined') {\n      this.options.closeOnSelection = true;\n    }\n\n    if (typeof this.options.closeOnBlur === 'undefined') {\n      this.options.closeOnBlur = true;\n    }\n\n    if (this.options.id) {\n      externalStateControl.registerManager(this.options.id, this);\n    }\n\n    this.handleBlur = handleBlur.bind(this);\n    this.handleSelection = handleSelection.bind(this);\n    this.handleMenuKey = handleMenuKey.bind(this); // \"With focus on the drop-down menu, the Up and Down Arrow\n    // keys move focus within the menu items, \"wrapping\" at the top and bottom.\"\n    // \"Typing a letter (printable character) key moves focus to the next\n    // instance of a visible node whose title begins with that printable letter.\"\n    //\n    // All of the above is handled by focus-group.\n\n    this.focusGroup = createFocusGroup(focusGroupOptions); // These component references are added when the relevant components mount\n\n    this.button = null;\n    this.menu = null; // State trackers\n\n    this.isOpen = false;\n  },\n  focusItem: function focusItem(index) {\n    this.focusGroup.focusNodeAtIndex(index);\n  },\n  addItem: function addItem(item) {\n    this.focusGroup.addMember(item);\n  },\n  clearItems: function clearItems() {\n    this.focusGroup.clearMembers();\n  },\n  handleButtonNonArrowKey: function handleButtonNonArrowKey(event) {\n    this.focusGroup._handleUnboundKey(event);\n  },\n  destroy: function destroy() {\n    this.button = null;\n    this.menu = null;\n    this.focusGroup.deactivate();\n    clearTimeout(this.blurTimer);\n    clearTimeout(this.moveFocusTimer);\n  },\n  update: function update() {\n    this.menu.setState({\n      isOpen: this.isOpen\n    });\n    this.button.setState({\n      menuOpen: this.isOpen\n    });\n    this.options.onMenuToggle && this.options.onMenuToggle({\n      isOpen: this.isOpen\n    });\n  },\n  openMenu: function openMenu(openOptions) {\n    if (this.isOpen) return;\n    openOptions = openOptions || {};\n\n    if (openOptions.focusMenu === undefined) {\n      openOptions.focusMenu = true;\n    }\n\n    this.isOpen = true;\n    this.update();\n    this.focusGroup.activate();\n\n    if (openOptions.focusMenu) {\n      var self = this;\n      this.moveFocusTimer = setTimeout(function () {\n        self.focusItem(0);\n      }, 0);\n    }\n  },\n  closeMenu: function closeMenu(closeOptions) {\n    if (!this.isOpen) return;\n    closeOptions = closeOptions || {};\n    this.isOpen = false;\n    this.update();\n\n    if (closeOptions.focusButton) {\n      ReactDOM.findDOMNode(this.button).focus();\n    }\n  },\n  toggleMenu: function toggleMenu(closeOptions, openOptions) {\n    closeOptions = closeOptions || {};\n    openOptions = openOptions || {};\n\n    if (this.isOpen) {\n      this.closeMenu(closeOptions);\n    } else {\n      this.openMenu(openOptions);\n    }\n  }\n};\n\nfunction handleBlur() {\n  var self = this;\n  self.blurTimer = setTimeout(function () {\n    var buttonNode = ReactDOM.findDOMNode(self.button);\n    if (!buttonNode) return;\n    var activeEl = buttonNode.ownerDocument.activeElement;\n    if (buttonNode && activeEl === buttonNode) return;\n    var menuNode = ReactDOM.findDOMNode(self.menu);\n\n    if (menuNode === activeEl) {\n      self.focusItem(0);\n      return;\n    }\n\n    if (menuNode && menuNode.contains(activeEl)) return;\n    if (self.isOpen) self.closeMenu({\n      focusButton: false\n    });\n  }, 0);\n}\n\nfunction handleSelection(value, event) {\n  if (this.options.closeOnSelection) this.closeMenu({\n    focusButton: true\n  });\n  if (this.options.onSelection) this.options.onSelection(value, event);\n}\n\nfunction handleMenuKey(event) {\n  if (this.isOpen) {\n    switch (event.key) {\n      // With focus on the drop-down menu, pressing Escape closes\n      // the menu and returns focus to the button.\n      case 'Escape':\n        event.preventDefault();\n        this.closeMenu({\n          focusButton: true\n        });\n        break;\n\n      case 'Home':\n        event.preventDefault();\n        this.focusGroup.moveFocusToFirst();\n        break;\n\n      case 'End':\n        event.preventDefault();\n        this.focusGroup.moveFocusToLast();\n        break;\n    }\n  }\n}\n\nmodule.exports = function (options) {\n  var newManager = Object.create(protoManager);\n  newManager.init(options);\n  return newManager;\n};","map":{"version":3,"sources":["/home/skpandey1294/Desktop/oca/node_modules/react-aria-menubutton/dist/createManager.js"],"names":["ReactDOM","require","createFocusGroup","externalStateControl","focusGroupOptions","wrap","stringSearch","protoManager","init","options","closeOnSelection","closeOnBlur","id","registerManager","handleBlur","bind","handleSelection","handleMenuKey","focusGroup","button","menu","isOpen","focusItem","index","focusNodeAtIndex","addItem","item","addMember","clearItems","clearMembers","handleButtonNonArrowKey","event","_handleUnboundKey","destroy","deactivate","clearTimeout","blurTimer","moveFocusTimer","update","setState","menuOpen","onMenuToggle","openMenu","openOptions","focusMenu","undefined","activate","self","setTimeout","closeMenu","closeOptions","focusButton","findDOMNode","focus","toggleMenu","buttonNode","activeEl","ownerDocument","activeElement","menuNode","contains","value","onSelection","key","preventDefault","moveFocusToFirst","moveFocusToLast","module","exports","newManager","Object","create"],"mappings":"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","sourcesContent":["'use strict';\n\nvar ReactDOM = require('react-dom');\nvar createFocusGroup = require('focus-group');\nvar externalStateControl = require('./externalStateControl');\n\nvar focusGroupOptions = {\n  wrap: true,\n  stringSearch: true\n};\n\nvar protoManager = {\n  init: function init(options) {\n    this.options = options || {};\n\n    if (typeof this.options.closeOnSelection === 'undefined') {\n      this.options.closeOnSelection = true;\n    }\n\n    if (typeof this.options.closeOnBlur === 'undefined') {\n      this.options.closeOnBlur = true;\n    }\n\n    if (this.options.id) {\n      externalStateControl.registerManager(this.options.id, this);\n    }\n\n    this.handleBlur = handleBlur.bind(this);\n    this.handleSelection = handleSelection.bind(this);\n    this.handleMenuKey = handleMenuKey.bind(this);\n\n    // \"With focus on the drop-down menu, the Up and Down Arrow\n    // keys move focus within the menu items, \"wrapping\" at the top and bottom.\"\n    // \"Typing a letter (printable character) key moves focus to the next\n    // instance of a visible node whose title begins with that printable letter.\"\n    //\n    // All of the above is handled by focus-group.\n    this.focusGroup = createFocusGroup(focusGroupOptions);\n\n    // These component references are added when the relevant components mount\n    this.button = null;\n    this.menu = null;\n\n    // State trackers\n    this.isOpen = false;\n  },\n  focusItem: function focusItem(index) {\n    this.focusGroup.focusNodeAtIndex(index);\n  },\n  addItem: function addItem(item) {\n    this.focusGroup.addMember(item);\n  },\n  clearItems: function clearItems() {\n    this.focusGroup.clearMembers();\n  },\n  handleButtonNonArrowKey: function handleButtonNonArrowKey(event) {\n    this.focusGroup._handleUnboundKey(event);\n  },\n  destroy: function destroy() {\n    this.button = null;\n    this.menu = null;\n    this.focusGroup.deactivate();\n    clearTimeout(this.blurTimer);\n    clearTimeout(this.moveFocusTimer);\n  },\n  update: function update() {\n    this.menu.setState({ isOpen: this.isOpen });\n    this.button.setState({ menuOpen: this.isOpen });\n    this.options.onMenuToggle && this.options.onMenuToggle({ isOpen: this.isOpen });\n  },\n  openMenu: function openMenu(openOptions) {\n    if (this.isOpen) return;\n    openOptions = openOptions || {};\n    if (openOptions.focusMenu === undefined) {\n      openOptions.focusMenu = true;\n    }\n    this.isOpen = true;\n    this.update();\n    this.focusGroup.activate();\n    if (openOptions.focusMenu) {\n      var self = this;\n      this.moveFocusTimer = setTimeout(function () {\n        self.focusItem(0);\n      }, 0);\n    }\n  },\n  closeMenu: function closeMenu(closeOptions) {\n    if (!this.isOpen) return;\n    closeOptions = closeOptions || {};\n    this.isOpen = false;\n    this.update();\n    if (closeOptions.focusButton) {\n      ReactDOM.findDOMNode(this.button).focus();\n    }\n  },\n  toggleMenu: function toggleMenu(closeOptions, openOptions) {\n    closeOptions = closeOptions || {};\n    openOptions = openOptions || {};\n    if (this.isOpen) {\n      this.closeMenu(closeOptions);\n    } else {\n      this.openMenu(openOptions);\n    }\n  }\n};\n\nfunction handleBlur() {\n  var self = this;\n  self.blurTimer = setTimeout(function () {\n    var buttonNode = ReactDOM.findDOMNode(self.button);\n    if (!buttonNode) return;\n    var activeEl = buttonNode.ownerDocument.activeElement;\n    if (buttonNode && activeEl === buttonNode) return;\n    var menuNode = ReactDOM.findDOMNode(self.menu);\n    if (menuNode === activeEl) {\n      self.focusItem(0);\n      return;\n    }\n    if (menuNode && menuNode.contains(activeEl)) return;\n    if (self.isOpen) self.closeMenu({ focusButton: false });\n  }, 0);\n}\n\nfunction handleSelection(value, event) {\n  if (this.options.closeOnSelection) this.closeMenu({ focusButton: true });\n  if (this.options.onSelection) this.options.onSelection(value, event);\n}\n\nfunction handleMenuKey(event) {\n  if (this.isOpen) {\n    switch (event.key) {\n      // With focus on the drop-down menu, pressing Escape closes\n      // the menu and returns focus to the button.\n      case 'Escape':\n        event.preventDefault();\n        this.closeMenu({ focusButton: true });\n        break;\n      case 'Home':\n        event.preventDefault();\n        this.focusGroup.moveFocusToFirst();\n        break;\n      case 'End':\n        event.preventDefault();\n        this.focusGroup.moveFocusToLast();\n        break;\n    }\n  }\n}\n\nmodule.exports = function (options) {\n  var newManager = Object.create(protoManager);\n  newManager.init(options);\n  return newManager;\n};"]},"metadata":{},"sourceType":"script"}