"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _farmblocksTheme = require("@crave/farmblocks-theme");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var borderRadius = "3px";

var hoverColors = function hoverColors(props) {
  if (props.footer) {
    return "";
  }

  return (0, _styledComponents.css)(["background:", ";color:white;"], _farmblocksTheme.colors.INDIGO_MILK_CAP);
};

var fontColor = function fontColor(props) {
  if (props.selected && !props.highlighted) {
    return _farmblocksTheme.colors.INDIGO_MILK_CAP;
  }

  return _farmblocksTheme.colors.OYSTER;
};

var cursor = function cursor(props) {
  return props.footer ? "auto" : "pointer";
};

var DropdownItemWrapper = _styledComponents["default"].li.withConfig({
  displayName: "DropdownItemWrapper",
  componentId: "sc-1h1nfb3-0"
})(["cursor:", ";overflow:hidden;transition:all ease 0.2s;color:", ";:hover{", ";}", ";border-bottom:solid 1px ", ";&:first-child{border-top-right-radius:", ";border-top-left-radius:", ";}&:last-child{border-bottom-right-radius:", ";border-bottom-left-radius:", ";}> div{padding:14px;:focus{outline:auto;outline-color:", ";}:hover{outline:none;}}"], cursor, fontColor, hoverColors, function (props) {
  return props.highlighted && hoverColors;
}, _farmblocksTheme.colors.GREY_16, borderRadius, borderRadius, borderRadius, borderRadius, _farmblocksTheme.colors.INDIGO_MILK_CAP);

DropdownItemWrapper.displayName = "DropdownItemWrapper";
var _default = DropdownItemWrapper;
exports["default"] = _default;