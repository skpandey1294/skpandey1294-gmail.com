"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _farmblocksIcon = require("@crave/farmblocks-icon");

var _buttonSizes = _interopRequireDefault(require("./constants/buttonSizes"));

var _buttonTypes = _interopRequireDefault(require("./constants/buttonTypes"));

var _Button = _interopRequireDefault(require("./styledComponents/Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var LoadingIcon = (0, _farmblocksIcon.withAnimation)(_farmblocksIcon.MdLoading);
var Button = React.forwardRef(function (_ref, ref) {
  var disabled = _ref.disabled,
      icon = _ref.icon,
      rightIcon = _ref.rightIcon,
      text = _ref.text,
      children = _ref.children,
      loading = _ref.loading,
      buttonProps = _objectWithoutProperties(_ref, ["disabled", "icon", "rightIcon", "text", "children", "loading"]);

  var leftIcon = loading ? React.createElement(LoadingIcon, {
    "data-testid": "loading"
  }) : icon;
  var isDisabled = disabled || loading;
  var showIcon = icon || loading;
  var iconOffset = text || children ? 6 : 0;
  var buttonContent = text || children;
  var isIconOnly = buttonContent === undefined;
  return React.createElement(_Button["default"], _extends({
    disabled: isDisabled,
    isIconOnly: isIconOnly,
    displayBlock: buttonProps.fluid,
    isLoading: loading,
    ref: ref
  }, buttonProps), showIcon && React.createElement("div", {
    className: "icon left-icon",
    style: {
      transform: "translateX(-".concat(iconOffset, "px)")
    }
  }, leftIcon), buttonContent, rightIcon && React.createElement("div", {
    className: "icon right-icon",
    style: {
      transform: "translateX(".concat(iconOffset, "px)")
    }
  }, rightIcon));
});
Button.propTypes = {
  activated: _propTypes["default"].bool,
  icon: _propTypes["default"].node,
  rightIcon: _propTypes["default"].node,
  onClick: _propTypes["default"].func,
  text: _propTypes["default"].string,
  children: _propTypes["default"].node,
  size: _propTypes["default"].oneOf(Object.keys(_buttonSizes["default"])),
  type: _propTypes["default"].oneOf(Object.keys(_buttonTypes["default"])),
  fluid: _propTypes["default"].bool,
  loading: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  boxShadow: _propTypes["default"].string,
  paddingX: _propTypes["default"].string,
  fontSize: _propTypes["default"].string,
  fontWeight: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  textColor: _propTypes["default"].string // ... and all properties accepted by the html button

};
Button.defaultProps = {
  size: _buttonSizes["default"].SMALL,
  type: _buttonTypes["default"].NEUTRAL
};
var _default = Button;
exports["default"] = _default;